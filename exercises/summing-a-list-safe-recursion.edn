{:title "summing a list (safe recursion)"
 :instructions ["Write a function to sum a list of numbers, using recursion, but in a way that doesn't blow the stack."]
 :related #{"summing-a-list-reduce"
            "summing-a-list-apply"
            "summing-a-list-atom"
            "summing-a-list-naive-recursion"}
 :solution ['(defn sum* [values accumulator]
               (if (empty? values)
                 accumulator
                 (recur (rest values) (+ (first values) accumulator))))

            '(defn sum [values]
               (sum* values 0))]
 :uses #{:recursion 'first 'rest 'recur 'empty? :math-operations 'if '+}}
