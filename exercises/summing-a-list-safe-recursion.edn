{:title "summing a list (safe recursion)"
 :difficulty :mid
 :category :learning-functions
 :instructions ["Write a function to sum a list of numbers. Use recursion, but in a way that doesn't blow the stack."]
 :related #{"summing-a-list-reduce"
            "summing-a-list-apply"
            "summing-a-list-atom"
            "summing-a-list-naive-recursion"}
 :tests [(is (= 10 (sum [1 2 3 4])))
         (is (= 0 (sum [])))
         (is (= 0 (sum [1 -1 1 -1 1 -1 0])))]
 :solution [(defn sum
              ([values] (sum values 0))
              ([values accumulator]
                (if (empty? values)
                 accumulator
                 (recur (rest values) (+ (first values) accumulator)))))]
 :teaches #{recur}
 :uses #{:recursion first rest empty? :math-operations if +}}
