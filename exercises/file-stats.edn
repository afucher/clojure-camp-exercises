{:title "file number stats"
 :instructions ["Read a bunch of integers from a file and return the mean, median, mode and standard-deviation."]
 :category :synthesis
 :difficulty :mid
 :uses #{slurp clojure.string/split map Long. / Math/pow Math/sqrt clojure.set/map-invert
        sort nth}
 :solution [(require '[clojure.string :as string])
            (require '[clojure.set :refer [map-invert]])
            (defn file-stats
              [file-name]
              (let [nums (->> (string/split (slurp "/home/james/tmp/number-test") #"\s+")
                             (map (fn [num-str] (Long. num-str))))
                    count-nums (count nums)
                    mean (/ (reduce + nums) count-nums)]
                {:mean (float mean)
                 :stddev (-> (reduce (fn [s v] (+ s (Math/pow (- v mean) 2)))
                                     0 nums)
                             (/ (dec count-nums))
                             (Math/sqrt))
                 :median (let [sorted (sort nums)
                               mid (quot count-nums 2)]
                           (prn sorted mid (nth nums mid))
                           (if (odd? count-nums)
                             (nth sorted mid)
                             (/ (+ (nth sorted mid) (nth sorted (inc mid)))
                                2)))
                 :mode (->> nums frequencies map-invert
                           (sort-by identity (fn [a b] (compare b a)))
                           first second)}))]}
