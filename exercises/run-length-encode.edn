{:title "run-length encoding"
 :difficulty :mid
 :category :synthesis
 :related #{"run-length-decode"}
 :instructions ["Write a function that does a run-length encoding of a sequence"
                (defn run-length [things])

                "Additional challange: Try implementing this with a reduce"]
 :tests [(is (= [[:a 2] [:b 1] [:c 3]]
                (run-length [:a :a :b :c :c :c])))]
 :type #{:word-problem}
 :uses #{defn partition-by map juxt
        reduce conj vec butlast inc peek}
 :solution [(defn run-length [xs]
               (->> (partition-by identity xs)
                   (map (juxt first count))))

            (defn run-length-reduce [xs]
               (reduce (fn [vs x]
                         (let [[v c] (peek vs)]
                           (if (= v x)
                             (conj (vec (butlast vs)) [v (inc c)])
                             (conj vs [x 1]))))
                       []
                       xs))]
 :source "https://exercism.io/tracks/clojure/exercises/run-length-encoding"}
