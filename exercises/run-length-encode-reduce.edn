{:title "run-length encoding (with reduce)"
 :difficulty :mid
 :category :synthesis
 :related #{"run-length-decode"}
 :instructions ["As before, write a function that does a run-length encoding of a given sequence, but this time, use `reduce`."]
 :function-template (defn run-length [xs])
 :test-cases
[{:input (run-length [:a :a :b :c :c :c])
  :output [[:a 2] [:b 1] [:c 3]]}]
:type #{:word-problem}
 :teaches #{reduce}
 :uses #{conj vec butlast inc peek}
 :solution [(defn run-length [xs]
              (reduce (fn [vs x]
                        (let [[v c] (peek vs)]
                          (if (= v x)
                            (conj (vec (butlast vs)) [v (inc c)])
                            (conj vs [x 1]))))
                      []
                      xs))]
 :source "https://exercism.io/tracks/clojure/exercises/run-length-encoding"}
