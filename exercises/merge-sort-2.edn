{:title "merge sort part 2"
 :category :synthesis
 :difficulty :mid
 :related #{"merge-sort-1"}
 :instructions ["Take your merge sort implementation from part 1, parallelize it, and compare the timings"]
 :tests [(let [rng (range 100000)
               test-content (vec (shuffle rng))]
           (is (= rng
                  (time (merge-sort test-content))))
           (is (= rng
                  (time (parallel-merge-sort test-content)))))]
 :solution [(defn merge-vecs
              [a b]
              (loop [merged []
                     a a
                     b b]
                (cond
                  (empty? a) (into merged b)
                  (empty? b) (into merged a)
                  :else
                  (let [[a1 & as] a
                        [b1 & bs] b]
                    (if (pos? (compare a1 b1))
                      (recur (conj merged b1) a bs)
                      (recur (conj merged a1) as b))))))

            (defn parallel-merge-sort
              [lst]
              (if (>= 1 (count lst))
                lst
                (let [mid (Math/floor (/ (count lst) 2))
                      a (subvec lst 0 mid)
                      b (subvec lst mid)]
                  (merge-vecs @(future (merge-sort a))
                              @(future (merge-sort b))))))]}
