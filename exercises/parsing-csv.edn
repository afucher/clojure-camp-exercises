{:title "CSV parsing"
 :category :synthesis
 :difficulty :high
 :instructions ["Write a function that a csv string and parses it into a series of vectors."
                "For example, if the file looks like this:"
                ""
                "name,email,comment"
                "james,james@james.com,alright\\, but weird"
                "raf,raf@raf.com,they say \"works, plays\""
                "beep,beep@beep.com,they say\\, \"works, plays\",3"
                ""
                "The output would look like:"
                [["name" "email" "comment" "id"]
                 ["james" "james@james.com" "alright, but weird" "1"]
                 ["raf" "raf@raf.com" "they say \"works, plays\"" "2"]
                 ["beep" "beep@beep.com" "they say, \"works, plays\"" "3"]]]
 :uses #{slurp clojure.string/split loop recur cond empty? conj map clojure.string/replace}
 :solution [(require '[clojure.string :as string])
            (defn parse-csv
              [file-name]
              (let [lines (string/split (slurp "/Users/james/tmp/test.csv") #"\n")]
                ;; if we don't need to worry about quotes, we can take the easy path
                (for [line lines]
                  (if (nil? (string/index-of line "\""))
                    (->> (string/split line #"(?<!\\),")
                         (mapv (fn [col] (string/replace col #"\\," ","))))
                    (loop [accum [[]]
                           in-quote? false
                           escaped? false
                           [c & cs :as txt] line]
                      (let [idx (dec (count accum))]
                        (cond
                          (empty? txt)
                          (mapv (partial apply str) accum)

                          escaped?
                          (recur (update accum idx conj c)
                                 in-quote? false cs)

                          (= \\ c)
                          (recur accum in-quote? true cs)

                          (= \" c)
                          (recur (update accum idx conj c)
                                 (not in-quote?)
                                 false
                                 cs)

                          (and (not in-quote?) (= \, c))
                          (recur (conj accum []) in-quote? false cs)

                          :else
                          (recur (update accum (dec (count accum))
                                         conj c)
                                 in-quote?
                                 false
                                 cs))))))))]}
