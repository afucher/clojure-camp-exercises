{:title "merge sort"
 :category :synthesis
 :difficulty :high
 :instructions ["Implement merge sort."]
 :tests [(is (= [1 2 3 4 5 6]
                (merge-sort [5 6 3 1 2 4])))]
 :uses #{loop subvec count / :math-operations recur cond
        compare pos?}
 :solution [(defn merge-vecs
              [a b]
              (loop [merged []
                     a a
                     b b]
                (cond
                  (empty? a) (into merged b)
                  (empty? b) (into merged a)
                  :else
                  (let [[a1 & as] a
                        [b1 & bs] b]
                    (if (pos? (compare a1 b1))
                      (recur (conj merged b1) a bs)
                      (recur (conj merged a1) as b))))))

            (defn merge-sort
              [lst]
              (if (>= 1 (count lst))
                lst
                (let [mid (Math/floor (/ (count lst) 2))
                      a (subvec lst 0 mid)
                      b (subvec lst mid)]
                  (merge-vecs (merge-sort a)
                              (merge-sort b)))))]}
